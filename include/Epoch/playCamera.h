#ifndef _PLAYCAMERA_H
#define _PLAYCAMERA_H

#include "types.h"
#include "Game/Navi.h"
namespace Game {

struct PlayCamera { /* PlaceHolder Class Structure */
	// uint* this;
	u32 filler_00;
	int field_0x4;
	int field_0x8;
	int field_0xc;
	int field_0x10;
	char* name;
	char field_0x18;
	u8 field_0x19;
	u8 field_0x1a;
	u8 field_0x1b;
	u32 field_0x1c;
	u32 field_0x20;
	u32 field_0x24;
	float FOV;
	float field_0x2c;
	struct LookAtCamera* field_0x30;
	struct Matrixf Cammatrix;
	u8 field_0x64;
	u8 field_0x65;
	u8 field_0x66;
	u8 field_0x67;
	u8 field_0x68;
	u8 field_0x69;
	u8 field_0x6a;
	u8 field_0x6b;
	u8 field_0x6c;
	u8 field_0x6d;
	u8 field_0x6e;
	u8 field_0x6f;
	float calcNearPlane;
	float calcFarPlane;
	float field_0x78;
	float field_0x7c;
	float field_0x80;
	int field_0x84;
	int field_0x88;
	int field_0x8c;
	int field_0x90;
	int field_0x94;
	int field_0x98;
	int field_0x9c;
	int field_0xa0;
	int field_0xa4;
	int field_0xa8;
	int field_0xac;
	int field_0xb0;
	int matrix1;
	int field_0xb8;
	int field_0xbc;
	int field_0xc0;
	int field_0xc4;
	int field_0xc8;
	int field_0xcc;
	int field_0xd0;
	int field_0xd4;
	int field_0xd8;
	int field_0xdc;
	int field_0xe0;
	int field_0xe4;
	int field_0xe8;
	int field_0xec;
	int field_0xf0;
	int field_0xf4;
	int field_0xf8;
	int field_0xfc;
	int field_0x100;
	int field_0x104;
	int field_0x108;
	int field_0x10c;
	int field_0x110;
	int field_0x114;
	int field_0x118;
	int field_0x11c;
	int field_0x120;
	int vp1;
	int vp2;
	int field_0x12c;
	int field_0x130;
	float field_0x134;
	float field_0x138;
	float field_0x13c;
	u32 field_0x140;
	struct Matrixf matrix;
	u8 field_0x174;
	u8 field_0x175;
	u8 field_0x176;
	u8 field_0x177;
	u8 field_0x178;
	u8 field_0x179;
	u8 field_0x17a;
	u8 field_0x17b;
	u8 field_0x17c;
	u8 field_0x17d;
	u8 field_0x17e;
	u8 field_0x17f;
	float CamTargetX;
	float CamTargetY;
	float CamTargetZ;
	float field_0x18c;
	float field_0x190;
	float field_0x194;
	struct Navi* target;
	int ChangePlayer;
	int CameraZoomLevel;
	int CameraZangle;
	float NormalCam;
	float zoomCamParm;
	float camAngle1;
	float camAngle2;
	float zoom;
	float zoomCam;
	float goalFov;
	float nearZ;
	float farZ;
	float camYOffset;
	float weight;
	float distance;
	float SmoothTheta;
	float FollowTime;
	float timeHoldingZ;
	float camTargetXpos;
	float camTargetYpos;
	float camTargetZpos;
	u8 isVibrate1;
	char isVibrate2;
	u8 isVibrate3;
	u8 field_0x1f3;
	float field_0x1f4;
	float field_0x1f8;
	float field_0x1fc;
	float cameraRoll;
	float field_0x204;
	float field_0x208;
	float field_0x20c;
	float field_0x210;
	float field_0x214;
	float Vibrate1;
	float Vibrate2;
	float vibtimer;
	float field_0x224;
	float field_0x228;
	float field_0x22c;
	float field_0x230;
	float field_0x234;
	float field_0x238;
	float field_0x23c;
	float field_0x240;
	float field_0x244;
	u8 HeldL;
	u8 field_0x249;
	u8 field_0x24a;
	u8 field_0x24b;
	struct CameraParms* CameraParms;
	struct VibrationParms* VibParm;
	u8 field_0x254;
	u8 field_0x255;
	u8 field_0x256;
	u8 field_0x257;
	u8 field_0x258;
	u8 field_0x259;
	u8 field_0x25a;
	u8 field_0x25b;
	u8 field_0x25c;
	u8 field_0x25d;
	u8 field_0x25e;
	u8 field_0x25f;
	u8 field_0x260;
	u8 field_0x261;
	u8 field_0x262;
	u8 field_0x263;
	u8 field_0x264;
	u8 field_0x265;
	u8 field_0x266;
	u8 field_0x267;
	u8 field_0x268;
	u8 field_0x269;
	u8 field_0x26a;
	u8 field_0x26b;
	u8 field_0x26c;
	u8 field_0x26d;
	u8 field_0x26e;
	u8 field_0x26f;
	u8 field_0x270;
	u8 field_0x271;
	u8 field_0x272;
	u8 field_0x273;
	u8 field_0x274;
	u8 field_0x275;
	u8 field_0x276;
	u8 field_0x277;
	u8 field_0x278;
	u8 field_0x279;
	u8 field_0x27a;
	u8 field_0x27b;
	u8 field_0x27c;
	u8 field_0x27d;
	u8 field_0x27e;
	u8 field_0x27f;
	u8 field_0x280;
	u8 field_0x281;
	u8 field_0x282;
	u8 field_0x283;
	u8 field_0x284;
	u8 field_0x285;
	u8 field_0x286;
	u8 field_0x287;
	u8 field_0x288;
	u8 field_0x289;
	u8 field_0x28a;
	u8 field_0x28b;
	u8 field_0x28c;
	u8 field_0x28d;
	u8 field_0x28e;
	u8 field_0x28f;
	u8 field_0x290;
	u8 field_0x291;
	u8 field_0x292;
	u8 field_0x293;
	u8 field_0x294;
	u8 field_0x295;
	u8 field_0x296;
	u8 field_0x297;
	u8 field_0x298;
	u8 field_0x299;
	u8 field_0x29a;
	u8 field_0x29b;
	u8 field_0x29c;
	u8 field_0x29d;
	u8 field_0x29e;
	u8 field_0x29f;
	u8 field_0x2a0;
	u8 field_0x2a1;
	u8 field_0x2a2;
	u8 field_0x2a3;
	u8 field_0x2a4;
	u8 field_0x2a5;
	u8 field_0x2a6;
	u8 field_0x2a7;
	u8 field_0x2a8;
	u8 field_0x2a9;
	u8 field_0x2aa;
	u8 field_0x2ab;
	u8 field_0x2ac;
	u8 field_0x2ad;
	u8 field_0x2ae;
	u8 field_0x2af;
	u8 field_0x2b0;
	u8 field_0x2b1;
	u8 field_0x2b2;
	u8 field_0x2b3;
	u8 field_0x2b4;
	u8 field_0x2b5;
	u8 field_0x2b6;
	u8 field_0x2b7;
	u8 field_0x2b8;
	u8 field_0x2b9;
	u8 field_0x2ba;
	u8 field_0x2bb;
	u8 field_0x2bc;
	u8 field_0x2bd;
	u8 field_0x2be;
	u8 field_0x2bf;
	u8 field_0x2c0;
	u8 field_0x2c1;
	u8 field_0x2c2;
	u8 field_0x2c3;
	u8 field_0x2c4;
	u8 field_0x2c5;
	u8 field_0x2c6;
	u8 field_0x2c7;
	u8 field_0x2c8;
	u8 field_0x2c9;
	u8 field_0x2ca;
	u8 field_0x2cb;
	u8 field_0x2cc;
	u8 field_0x2cd;
	u8 field_0x2ce;
	u8 field_0x2cf;
	float VibrateX;
	float VibrateY;
	float VibrateZ;
};
} // namespace Game

#endif
